@page "/"
@using System.Net.Http.Headers
@using BlazorFileUpload.Shared
@inject HttpClient Http

<PageTitle>Upload file</PageTitle>

<h1>Upload file!</h1>

<InputFile OnChange="@OnInputFileChange" multiply/>

@if (fileNames.Count > 0)
{
    <ul>
       @foreach (var fileName in fileNames)
       {
           <li>
               File: @fileName
               <br/>
               <span>
                   Stored File Name: @GetStoredFileName(fileName)
               </span>
           </li>
       }
    </ul>
}

@code
{
    private int maxAllowedFiles = int.MaxValue;
    private long maxAllowedSize = long.MaxValue;
    private List<string> fileNames= new();
    private List<UploadResult> uploadResults = new();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileNames.Add(file.Name);

            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
        }

        var response = await Http.PostAsync("/api/File", content);
        var newUploadFileResult = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if (newUploadFileResult != null) uploadResults = uploadResults.Concat(newUploadFileResult).ToList();

    }

    private string? GetStoredFileName(string filename)
    {

        var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == filename);

        return uploadResult is not null ? uploadResult.StoredFileName : "File not found";

    }
}
